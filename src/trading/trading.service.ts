import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { ConfigService } from '@nestjs/config';
import { ExchangeService } from '../exchange/exchange.service';
import { TrendRsiStrategy } from '../strategy/trend-rsi.strategy';
import { RiskManagementService } from 'src/risk-management/risk-management.service';
import { VolatilityAdjusterService } from 'src/risk-management/services/volatility-adjuster.service';

@Injectable()
export class TradingService {
  private readonly logger = new Logger(TradingService.name);
  private symbol: string;
  private isTrading: boolean = true;

  constructor(
    private configService: ConfigService,
    private exchangeService: ExchangeService,
    private trendRsiStrategy: TrendRsiStrategy,
    private riskManagementService: RiskManagementService,
    private volatilityAdjuster: VolatilityAdjusterService,
  ) {
    this.symbol = this.configService.get<string>('SYMBOL') || 'BTCUSDT';
    this.logger.log(`–¢–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${this.symbol}`);
  }

  @Cron(CronExpression.EVERY_MINUTE)
  async executeTradingLogic() {
    if (!this.isTrading) {
      this.logger.debug('–¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      return;
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
      const signal = await this.trendRsiStrategy.analyze();
      
      if (signal.action === 'HOLD') {
        this.logger.debug(`–°–∏–≥–Ω–∞–ª: ${signal.action} - ${signal.reason}`);
        return;
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞
      const klines = await this.exchangeService.getKlines('15m', 50);
      const closes = klines.map(candle => parseFloat(candle[4])).reverse();
      const marketVolatility = this.volatilityAdjuster.calculateVolatility(closes);

      // –ü—Ä–æ–≤–æ–¥–∏–º —Ä–∏—Å–∫-–∞–Ω–∞–ª–∏–∑ –ü–ï–†–ï–î –≤—Ö–æ–¥–æ–º –≤ –ø–æ–∑–∏—Ü–∏—é
      const riskDecision = await this.riskManagementService.evaluateTradeRisk(
        signal.price || parseFloat(klines[0][4]),
        signal.action,
        marketVolatility
      );

      this.logger.log(
        `–°–∏–≥–Ω–∞–ª: ${signal.action} | –†–∏—Å–∫: ${riskDecision.riskLevel} | ` +
        `–ú–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å: ${riskDecision.canTrade} | ${riskDecision.reason}`
      );

      // –ï—Å–ª–∏ —Ä–∏—Å–∫–∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è—é—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å
      if (!riskDecision.canTrade) {
        this.logger.warn(`‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: ${riskDecision.reason}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        riskDecision.actions.forEach(action => this.logger.warn(`   ${action}`));
        return;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ—Ç —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
      if (signal.action === 'BUY') {
        await this.openManagedPosition('Buy', riskDecision);
      } else if (signal.action === 'SELL') {
        await this.openManagedPosition('Sell', riskDecision);
      }

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–µ: ${error.message}`);
    }
  }

  /**
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏
   */
  private async openManagedPosition(
    side: 'Buy' | 'Sell',
    riskDecision: any
  ) {
    try {
      const entryPrice = side === 'Buy' ? 'market' : 'market'; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC –¥–ª—è BTCUSDT)
      const currentPrice = parseFloat((await this.exchangeService.getKlines('1m', 1))[0][4]);
      const positionSizeInQuote = riskDecision.recommendedPositionSize;
      const positionSizeInBase = (positionSizeInQuote / currentPrice).toFixed(6);

      this.logger.log(
        `üéØ –û—Ç–∫—Ä—ã–≤–∞–µ–º ${side} –ø–æ–∑–∏—Ü–∏—é | ` +
        `–†–∞–∑–º–µ—Ä: ${positionSizeInBase} | ` +
        `–°—Ç–æ–∏–º–æ—Å—Ç—å: $${positionSizeInQuote.toFixed(2)} | ` +
        `SL: ${riskDecision.adjustedStopLoss.toFixed(2)} | ` +
        `TP: ${riskDecision.adjustedTakeProfit.toFixed(2)}`
      );

      // –†–∞–∑–º–µ—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä
      const order = await this.exchangeService.placeOrder(side, positionSizeInBase);
      
      if (!order) {
        this.logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä');
        return;
      }

      this.logger.log(`‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: ${JSON.stringify(order)}`);

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
      setTimeout(async () => {
        await this.setManagedStops(side, riskDecision);
      }, 2000);

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –ø–æ–∑–∏—Ü–∏–∏: ${error.message}`);
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫-–∞–Ω–∞–ª–∏–∑–∞
   */
  private async setManagedStops(side: 'Buy' | 'Sell', riskDecision: any) {
    try {
      const positions = await this.exchangeService.getPositions();
      const position = positions.find(pos => 
        pos.side === side && parseFloat(pos.size) > 0
      );

      if (!position) {
        this.logger.warn('–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø–æ–≤');
        return;
      }

      const success = await this.exchangeService.setTradingStop(
        position.positionIdx,
        riskDecision.adjustedStopLoss.toFixed(2),
        riskDecision.adjustedTakeProfit.toFixed(2)
      );

      if (success) {
        this.logger.log(
          `üõ°Ô∏è –ó–∞—â–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ | ` +
          `SL: ${riskDecision.adjustedStopLoss.toFixed(2)} | ` +
          `TP: ${riskDecision.adjustedTakeProfit.toFixed(2)}`
        );
      } else {
        this.logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç');
      }

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —Å—Ç–æ–ø–æ–≤: ${error.message}`);
    }
  }

  /**
   * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø–æ–≤
   */
  @Cron('*/5 * * * *') // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  async monitorPositions() {
    try {
      const positions = await this.exchangeService.getPositions();
      const activePositions = positions.filter(pos => parseFloat(pos.size) > 0);

      if (activePositions.length === 0) return;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
      const riskMetrics = await this.riskManagementService.getCurrentRiskMetrics();
      
      if (!riskMetrics) return;

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
      this.logger.debug(
        `üìä –†–∏—Å–∫-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ | ` +
        `–ü—Ä–æ—Å–∞–¥–∫–∞: ${riskMetrics.currentDrawdown.toFixed(2)}% | ` +
        `–î–Ω–µ–≤–Ω–æ–π P&L: ${riskMetrics.dailyPnL.toFixed(2)}% | ` +
        `–†–∏—Å–∫-—Å–∫–æ—Ä: ${riskMetrics.riskScore.toFixed(1)}/100`
      );

      // –ï—Å–ª–∏ —Ä–∏—Å–∫-—Å–∫–æ—Ä –≤—ã—Å–æ–∫–∏–π, –º–æ–∂–µ–º —É–∂–µ—Å—Ç–æ—á–∏—Ç—å —Å—Ç–æ–ø—ã
      if (riskMetrics.riskScore > 60) {
        await this.tightenStopLosses(activePositions, riskMetrics.riskScore);
      }

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ–∑–∏—Ü–∏–π: ${error.message}`);
    }
  }

  /**
   * –£–∂–µ—Å—Ç–æ—á–∞–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —Ä–∏—Å–∫–µ
   */
  private async tightenStopLosses(positions: any[], riskScore: number) {
    for (const position of positions) {
      try {
        const currentPrice = parseFloat((await this.exchangeService.getKlines('1m', 1))[0][4]);
        const entryPrice = parseFloat(position.avgPrice);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å –ø–æ–∑–∏—Ü–∏–∏
        const side = position.side as 'Buy' | 'Sell';
        const unrealizedPnL = side === 'Buy' 
          ? (currentPrice - entryPrice) / entryPrice
          : (entryPrice - currentPrice) / entryPrice;

        // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–∏–±—ã–ª–∏ –∏ —Ä–∏—Å–∫ –≤—ã—Å–æ–∫–∏–π, –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å—Ç–æ–ø –∫ –±–µ–∑—É–±—ã—Ç–∫—É
        if (unrealizedPnL > 0.005 && riskScore > 70) { // 0.5% –ø—Ä–∏–±—ã–ª—å
          const breakEvenPrice = side === 'Buy' 
            ? entryPrice * 1.001 // –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–º–∏—Å—Å–∏–π
            : entryPrice * 0.999;

          await this.exchangeService.setTradingStop(
            position.positionIdx,
            breakEvenPrice.toFixed(2),
            position.takeProfit || '0'
          );

          this.logger.log(
            `üîí –°—Ç–æ–ø –ø–æ–¥—Ç—è–Ω—É—Ç –∫ –±–µ–∑—É–±—ã—Ç–∫—É | ` +
            `${side} | –¶–µ–Ω–∞: ${breakEvenPrice.toFixed(2)} | ` +
            `–†–∏—Å–∫-—Å–∫–æ—Ä: ${riskScore.toFixed(1)}`
          );
        }

      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–∂–µ—Å—Ç–æ—á–µ–Ω–∏–∏ —Å—Ç–æ–ø–æ–≤: ${error.message}`);
      }
    }
  }

  /**
   * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
   */
  async emergencyCloseAll(): Promise<void> {
    try {
      this.logger.warn('üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô');
      
      const positions = await this.exchangeService.getPositions();
      const activePositions = positions.filter(pos => parseFloat(pos.size) > 0);
      
      for (const position of activePositions) {
        await this.exchangeService.closePosition(
          String(position.positionIdx),
          position.side as 'Buy' | 'Sell',
          position.size
        );
        
        this.logger.warn(`‚ùå –ó–∞–∫—Ä—ã—Ç–∞ ${position.side} –ø–æ–∑–∏—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–º ${position.size}`);
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
      this.stopTrading();
      
    } catch (error) {
      this.logger.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏: ${error.message}`);
    }
  }

  stopTrading() {
    this.isTrading = false;
    this.logger.log('‚ùå –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  startTrading() {
    this.isTrading = true;
    this.logger.log('‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞');
  }

  async closeAllPositions() {
    return this.emergencyCloseAll();
  }
}
