// src/risk-management/risk-management.service.ts - –û–°–ù–û–í–ù–û–ô –°–ï–†–í–ò–°
import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Cron, CronExpression } from '@nestjs/schedule';
import { PositionSizingService } from './services/position-sizing.service';
import { DrawdownControllerService } from './services/drawdown-controller.service';
import { VolatilityAdjusterService } from './services/volatility-adjuster.service';
import { ExchangeService } from '../exchange/exchange.service';
import { RiskLimits, PositionSizingParams } from './interfaces/risk-management.interface';
import { RiskDecision } from './dto/risk-decision.dto';

@Injectable()
export class RiskManagementService {
  private readonly logger = new Logger(RiskManagementService.name);
  private riskLimits: RiskLimits;
  private emergencyStopActive: boolean = false;

  constructor(
    private configService: ConfigService,
    private positionSizingService: PositionSizingService,
    private drawdownController: DrawdownControllerService,
    private volatilityAdjuster: VolatilityAdjusterService,
    private exchangeService: ExchangeService,
  ) {
    this.initializeRiskLimits();
  }

  private initializeRiskLimits() {
    this.riskLimits = {
      maxDrawdownPercent: parseFloat(this.configService.get('MAX_DRAWDOWN_PERCENT') || '15'),
      maxDailyLossPercent: parseFloat(this.configService.get('MAX_DAILY_LOSS_PERCENT') || '3'),
      maxWeeklyLossPercent: parseFloat(this.configService.get('MAX_WEEKLY_LOSS_PERCENT') || '8'),
      maxPositionSizePercent: parseFloat(this.configService.get('MAX_POSITION_SIZE_PERCENT') || '10'),
      maxOpenPositions: parseInt(this.configService.get('MAX_OPEN_POSITIONS') || '3'),
      maxRiskScore: parseFloat(this.configService.get('MAX_RISK_SCORE') || '75'),
    };

    this.logger.log(`Risk limits initialized: ${JSON.stringify(this.riskLimits)}`);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –ø–æ–∑–∏—Ü–∏—é
   */
  async evaluateTradeRisk(
    entryPrice: number,
    side: 'BUY' | 'SELL',
    marketVolatility: number
  ): Promise<RiskDecision> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
      const balance = await this.getCurrentBalance();
      if (!balance) {
        return this.createRejectionDecision('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Å–∞–¥–∫–∏
      const riskMetrics = this.drawdownController.updateDrawdownMetrics(balance);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ª–∏–º–∏—Ç—ã
      if (this.emergencyStopActive) {
        return this.createRejectionDecision('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏');
      }

      if (riskMetrics.currentDrawdown > this.riskLimits.maxDrawdownPercent) {
        this.activateEmergencyStop('–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞');
        return this.createRejectionDecision('–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞');
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å
      if (riskMetrics.dailyPnL < -this.riskLimits.maxDailyLossPercent) {
        return this.createRejectionDecision('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å');
      }

      if (riskMetrics.weeklyPnL < -this.riskLimits.maxWeeklyLossPercent) {
        return this.createRejectionDecision('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å');
      }

      if (riskMetrics.riskScore > this.riskLimits.maxRiskScore) {
        return this.createRejectionDecision('–í—ã—Å–æ–∫–∏–π –æ–±—â–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è');
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
      const openPositions = await this.exchangeService.getPositions();
      const activePositions = openPositions.filter(pos => parseFloat(pos.size) > 0);
      
      if (activePositions.length >= this.riskLimits.maxOpenPositions) {
        return this.createRejectionDecision('–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π');
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
      const positionSizingParams: PositionSizingParams = {
        accountBalance: balance,
        volatility: marketVolatility,
        stopLossPercent: 1.5, // –ë–∞–∑–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
        riskPerTradePercent: 1.0, // 1% –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ–¥ —Ä–∏—Å–∫–æ–º
        maxPositionPercent: this.riskLimits.maxPositionSizePercent,
      };

      const recommendedPositionSize = this.positionSizingService.calculatePositionSize(positionSizingParams);

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
      const adjustedStopLoss = this.positionSizingService.calculateDynamicStopLoss(
        entryPrice,
        side,
        marketVolatility,
        1.5
      );

      const adjustedTakeProfit = side === 'BUY' 
        ? entryPrice * (1 + (0.03 * marketVolatility)) // 3% * –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        : entryPrice * (1 - (0.03 * marketVolatility));

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
      const riskLevel = this.determineRiskLevel(riskMetrics.riskScore, marketVolatility);

      return {
        canTrade: true,
        recommendedPositionSize,
        adjustedStopLoss,
        adjustedTakeProfit,
        riskLevel,
        reason: '–í—Å–µ —Ä–∏—Å–∫-–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
        actions: [
          `–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${recommendedPositionSize.toFixed(4)}`,
          `–°—Ç–æ–ø-–ª–æ—Å—Å: ${adjustedStopLoss.toFixed(2)}`,
          `–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${adjustedTakeProfit.toFixed(2)}`,
          `–†–∏—Å–∫-—Å–∫–æ—Ä: ${riskMetrics.riskScore.toFixed(1)}/100`
        ]
      };

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–∞: ${error.message}`);
      return this.createRejectionDecision('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–∞');
    }
  }

  private createRejectionDecision(reason: string): RiskDecision {
    return {
      canTrade: false,
      recommendedPositionSize: 0,
      adjustedStopLoss: 0,
      adjustedTakeProfit: 0,
      riskLevel: 'CRITICAL',
      reason,
      actions: ['–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞']
    };
  }

  private determineRiskLevel(riskScore: number, volatility: number): 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL' {
    const combinedRisk = (riskScore / 100) * 0.7 + (volatility / 3) * 0.3;

    if (combinedRisk < 0.3) return 'LOW';
    if (combinedRisk < 0.6) return 'MEDIUM';
    if (combinedRisk < 0.8) return 'HIGH';
    return 'CRITICAL';
  }

  private async getCurrentBalance(): Promise<number | null> {
    try {
      const balanceData = await this.exchangeService.getAccountBalance();
      if (balanceData?.list?.[0]?.totalWalletBalance) {
        return parseFloat(balanceData.list[0].totalWalletBalance);
      }
      return null;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error.message}`);
      return null;
    }
  }

  private activateEmergencyStop(reason: string) {
    this.emergencyStopActive = true;
    this.logger.error(`üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –¢–û–†–ì–û–í–õ–ò: ${reason}`);
  }

  /**
   * –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é)
   */
  resetEmergencyStop() {
    this.emergencyStopActive = false;
    this.logger.log('–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–±—Ä–æ—à–µ–Ω–∞');
  }

  /**
   * –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫
   */
  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)
  async resetDailyMetrics() {
    const balance = await this.getCurrentBalance();
    if (balance) {
      this.drawdownController.resetDailyMetrics(balance);
    }
  }

  /**
   * –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
   */
  @Cron(CronExpression.EVERY_WEEK)
  async resetWeeklyMetrics() {
    const balance = await this.getCurrentBalance();
    if (balance) {
      this.drawdownController.resetWeeklyMetrics(balance);
    }
  }

  /**
   * –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π —Å–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫
   */
  @Cron('0 0 1 * *') // 1 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
  async resetMonthlyMetrics() {
    const balance = await this.getCurrentBalance();
    if (balance) {
      this.drawdownController.resetMonthlyMetrics(balance);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
   */ 
  async getCurrentRiskMetrics() {
    const balance = await this.getCurrentBalance();
    if (!balance) return null;

    return this.drawdownController.updateDrawdownMetrics(balance);
  }
}
