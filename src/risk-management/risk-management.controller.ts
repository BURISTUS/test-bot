import { Controller, Get, Post, Body, Query } from '@nestjs/common';
import { RiskManagementService } from './risk-management.service';
import { TradingService } from '../trading/trading.service';

@Controller('risk-management')
export class RiskManagementController {
  constructor(
    private riskManagementService: RiskManagementService,
    private tradingService: TradingService,
  ) {}

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞
   */
  @Get('metrics')
  async getCurrentMetrics() {
    const metrics = await this.riskManagementService.getCurrentRiskMetrics();
    return {
      success: true,
      data: metrics,
      timestamp: new Date().toISOString(),
    };
  }

  /**
   * –û—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫ –¥–ª—è –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π —Å–¥–µ–ª–∫–∏
   */
  @Post('evaluate')
  async evaluateRisk(@Body() params: {
    entryPrice: number;
    side: 'BUY' | 'SELL';
    volatility?: number;
  }) {
    const { entryPrice, side, volatility = 1.0 } = params;
    
    const riskDecision = await this.riskManagementService.evaluateTradeRisk(
      entryPrice,
      side,
      volatility
    );
    
    return {
      success: true,
      data: riskDecision,
      timestamp: new Date().toISOString(),
    };
  }

  /**
   * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
   */
  @Post('emergency-stop')
  async emergencyStop() {
    await this.tradingService.emergencyCloseAll();
    
    return {
      success: true,
      message: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã.',
      timestamp: new Date().toISOString(),
    };
  }

  /**
   * –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
   */
  @Post('reset-emergency')
  async resetEmergency() {
    this.riskManagementService.resetEmergencyStop();
    
    return {
      success: true,
      message: '–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞',
      timestamp: new Date().toISOString(),
    };
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
   */
  @Post('start-trading')
  async startTrading() {
    this.tradingService.startTrading();
    
    return {
      success: true,
      message: '–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞',
      timestamp: new Date().toISOString(),
    };
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
   */
  @Post('stop-trading')
  async stopTrading() {
    this.tradingService.stopTrading();
    
    return {
      success: true,
      message: '–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
      timestamp: new Date().toISOString(),
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞—à–±–æ—Ä–¥ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
   */
  @Get('dashboard')
  async getDashboard() {
    try {
      const metrics = await this.riskManagementService.getCurrentRiskMetrics();
      
      if (!metrics) {
        return {
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞',
        };
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
      const riskStatus = this.getRiskStatus(metrics.riskScore);
      const drawdownStatus = this.getDrawdownStatus(metrics.currentDrawdown);
      
      return {
        success: true,
        data: {
          overview: {
            accountValue: metrics.accountValue,
            riskScore: metrics.riskScore,
            riskStatus,
            currentDrawdown: metrics.currentDrawdown,
            drawdownStatus,
          },
          performance: {
            dailyPnL: metrics.dailyPnL,
            weeklyPnL: metrics.weeklyPnL,
            monthlyPnL: metrics.monthlyPnL,
          },
          limits: {
            maxDrawdownAllowed: metrics.maxDrawdownAllowed,
            volatilityFactor: metrics.volatilityFactor,
          },
          alerts: this.generateAlerts(metrics),
        },
        timestamp: new Date().toISOString(),
      };
    } catch (error) {
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: ${error.message}`,
      };
    }
  }

  private getRiskStatus(riskScore: number): string {
    if (riskScore < 25) return 'üü¢ –ù–ò–ó–ö–ò–ô';
    if (riskScore < 50) return 'üü° –°–†–ï–î–ù–ò–ô';
    if (riskScore < 75) return 'üü† –í–´–°–û–ö–ò–ô';
    return 'üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô';
  }

  private getDrawdownStatus(drawdown: number): string {
    if (drawdown < 3) return 'üü¢ –û–¢–õ–ò–ß–ù–û';
    if (drawdown < 7) return 'üü° –ù–û–†–ú–ê';
    if (drawdown < 12) return 'üü† –í–ù–ò–ú–ê–ù–ò–ï';
    return 'üî¥ –û–ü–ê–°–ù–û';
  }

  private generateAlerts(metrics: any): string[] {
    const alerts = [];

    if (metrics.currentDrawdown > 10) {
      alerts.push(`‚ö†Ô∏è –ü—Ä–æ—Å–∞–¥–∫–∞ ${metrics.currentDrawdown.toFixed(2)}% –±–ª–∏–∑–∫–∞ –∫ –ª–∏–º–∏—Ç—É`);
    }

    if (metrics.dailyPnL < -2) {
      alerts.push(`üìâ –î–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ ${metrics.dailyPnL.toFixed(2)}% –ø—Ä–µ–≤—ã—à–∞—é—Ç –Ω–æ—Ä–º—É`);
    }

    if (metrics.riskScore > 70) {
      alerts.push(`üéØ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä ${metrics.riskScore.toFixed(1)}/100`);
    }

    if (metrics.weeklyPnL < -5) {
      alerts.push(`üìä –ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ ${metrics.weeklyPnL.toFixed(2)}% —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è`);
    }

    if (alerts.length === 0) {
      alerts.push('‚úÖ –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ');
    }

    return alerts;
  }
}